--- 
layout: post
title: noflo-geometry
tags: 
- gsoc
- gsoc2014
- google
- mozilla
- fbp
- noflo
- flowhub
---

Now that we have a working [noflo-canvas](http://github.com/noflo/noflo-canvas) it is time to try more complex shapes. [Voronoi Diagram](http://en.wikipedia.org/wiki/Voronoi_diagram) and [Delaunay Triangulation](http://en.wikipedia.org/wiki/Delaunay_triangulation) are canonical algorithms from [Computational Geometry](http://en.wikipedia.org/wiki/Computational_geometry) and were made classic for generative art or creative coding. These algorithms are useful to create textures or meshes. In general, you can give them a set of points and Voronoi will create cells around your points. Delaunay will draw triangles for each possible triple of points, with non-crossing edges. This figure presents both Voronoi Diagram (in pink) and Delaunay Triangulation (in blue) for some random points (in yellow):

![Voronoi and Delaunay](http://meemoo.org/images/delaunay_voronoi_still.png)

Other examples follow:

![Voronoi and Delaunay](http://meemoo.org/images/delaunay_voronoi.gif)

To better understand the Delaunay Triangulation, let's see an example. The following figure shows a triangulation for a set of points. Note the [circumcircles](http://en.wikipedia.org/wiki/Circumscribed_circle) around each possible triangle:

![Delaunay right example (modified from Wikipedia)](http://meemoo.org/images/delaunay_right.png)

There's no points inside of any of the circumcircles: the points are located right in circumcircles' edges. You can try to find other triangles which points are not inside circumcircles, but you won't. Let me give you an example of a wrong triangle:

![Delaunay wrong example (modified from Wikipedia)](http://meemoo.org/images/delaunay_wrong.png)

As you can see, the red points are inside the circumcircle of our green triangle, so it's not a valid triangle. That's what Delaunay Triangulation is about: for a given set of points, it finds all the triangles which points are not inside a circumcircle (formed by the triangles).

And what about Voronoi Diagram? There's many ways to understand what Voronoi algorithm is about, but there's an easy way now that we know Delaunay Triangulation. Voronoi is [dual](http://en.wikipedia.org/wiki/Duality) (or related) to Delaunay. If we connect the center points of all the triangle circumcircles obtained by the Delaunay Triangulation, we have the Voronoi Diagram!

![Voronoi and Delaunay duality (modified from Wikipedia)](http://meemoo.org/images/delaunay_voronoi_dual.gif)

The [noflo-geometry](http://github.com/automata/noflo-geometry) implements both Voronoi and Delaunay algorithms. Being NoFlo a general purpose flow-based environment, it is a common approach to search for JS libraries which implements what you want and encapsulate them as a bunch of components. For [noflo-geometry](http://github.com/automata/noflo-geometry) we used libraries by [@ironwallaby](https://github.com/ironwallaby/delaunay) and [@gorhill](https://github.com/gorhill/Javascript-Voronoi), and thanks to NoFlo now you can use both as components with a common interface, at the same environment:

![Voronoi](http://meemoo.org/images/voronoi.gif)

![Delaunay](http://meemoo.org/images/delaunay.gif)

Here are some examples of tessellations generated by the Voronoi and Delaunay component:

![Voronoi diagram 1](http://meemoo.org/images/voronoi1.png)

![Delaunay tessellation 1](http://meemoo.org/images/delaunay1.png)

![Delaunay tessellation 1](http://meemoo.org/images/delaunay2.png)

![Delaunay tessellation 1](http://meemoo.org/images/delaunay3.png)

![Delaunay tessellation 1](http://meemoo.org/images/delaunay4.png)

![Delaunay tessellation 1](http://meemoo.org/images/delaunay5.png)

![Delaunay tessellation 1](http://meemoo.org/images/delaunay6.png)

![Delaunay tessellation 1](http://meemoo.org/images/delaunay7.png)

Next steps
----------

[Forrest](http://forresto.com) was invited to the super cool [Assembly](http://www.assembly.org/summer14/demoscene) demo party (!!!) so we are planning to work on components for [threejs](http://threejs.org), [Web Audio API](http://github.com/automata/noflo-webaudio) and [timeline](https://github.com/noflo/noflo-ui/issues/151) to create a demo! Fun times coming, please keep following!

